#---------------------------------------------------------------
# Makefile of QTZ-Online-Game-Server-OS

PROJ_DIR ?= $(shell pwd)/../
CONFIG_MK ?= $(PROJ_DIR)mk/platform.mk
VMLIB ?= lpcvm.a
PACKAGES_SPEC_PATH ?=../apps/lpc/packages/

all: lpcvm

.PHONY:precompile lpcvm
precompile: predo grammar/cc.h include/cc.h files depend
lpcvm: precompile $(VMLIB)

include $(CONFIG_MK)

INCLUDES := -I.\
	-Iinclude \
	-Igrammar \
	$(INCLUDES)

EFUN_SPEC_FILES=$(wildcard $(PACKAGES_SPEC_PATH)/*_spec.h)
EFUN_DEFINES_MACROS=$(shell echo $(addprefix package_,$(patsubst $(PACKAGES_SPEC_PATH)/%_spec.h,%,$(EFUN_SPEC_FILES))) | tr '[a-z]' '[A-Z]')

OBJDIR		= obj
SRCDIR		= src
SRC	= grammar.tab.c lex.c \
	rc.c interpret.c simulate.c file.c \
	backend.c array.c mapping.c dirty.c comm.c regexp.c swap.c buffer.c \
	port.c class.c efuns_main.c \
	efuns_port.c otable.c dumpstat.c stralloc.c \
	hash.c reclaim.c simul_efun.c sprintf.c program.c \
	compiler.c avltree.c icode.c trees.c generate.c scratchpad.c \
	replace_program.c ualarm.c \
	crypt.c strstr.c disassembler.c binaries.c \
	qsort.c eoperators.c object.c \
	stack.c list.c md5.c \
	xalloc.c debug_message.c int_string.c vm.c \
	fs_mbuf.c

PACKAGE_FILE := pkgfile

OBJ	= $(addprefix $(OBJDIR)/,$(subst .c,.o,$(SRC)))


GRAMMAR = grammar/grammar.y


.PHONY : clean predo

predo:
	@test "$(shell cat $(PACKAGE_FILE))" == $(PACKAGES_SPEC_PATH) || test ! -d $(OBJDIR) || $(MAKE) clean
	@test -d $(OBJDIR) || mkdir $(OBJDIR)
	@echo $(PACKAGES_SPEC_PATH) > $(PACKAGE_FILE)

grammar/cc.h:
	rm -f grammar/cc.h
	echo "/* this file automatically generated by the Makefile */" > grammar/cc.h
	echo '#define COMPILER "$(CC)"' >> grammar/cc.h
	echo '#define OPTIMIZE "$(OPTIMIZE)"' >> grammar/cc.h
	echo '#define CFLAGS   "$(EDIT_CFLAGS) $(INCLUDES)"' >> grammar/cc.h
	echo '#define OBJDIR   "$(OBJDIR)"' >> grammar/cc.h
	echo '#define GAME_MODULE 1' >> grammar/cc.h
include/cc.h:
	cp -f grammar/cc.h include/cc.h
#$(EFUN_SPEC_FILES)
grammar/local_options.h: $(EFUN_SPEC_FILES)
	rm -f grammar/local_options.h
	@echo "// 定制的options" >> grammar/local_options.h
	@echo '// -------------------------------------------' >> grammar/local_options.h
	@echo '// 注意:packages的数量不能超过100' >> grammar/local_options.h
	@echo '// -------------------------------------------' >> grammar/local_options.h
	@echo '#include "grammar/options.h"' >> grammar/local_options.h
	@echo '#include "include/cc.h"' >> grammar/local_options.h
	@for v in $(EFUN_DEFINES_MACROS); do \
		echo "#define $$v" >> grammar/local_options.h; \
		continue;\
	done


#需要由edit_source自动生成的文件
files: $(EFUN_SPEC_FILES) grammar/local_options.h grammar/edit_source grammar/sysmalloc.c grammar/smalloc.c grammar/bsdmalloc.c grammar/debugmalloc.c grammar/wrappedmalloc.c grammar/options.h grammar/op_spec.c grammar/func_spec.c grammar/configure.h $(GRAMMAR).pre
	grammar/edit_source -configure
	grammar/edit_source -package_path '$(PACKAGES_SPEC_PATH)' -options -malloc -build_func_spec '$(CPP) $(CFLAGS) $(INCLUDES)' \
	          	    -process $(GRAMMAR).pre
	grammar/edit_source -package_path '$(PACKAGES_SPEC_PATH)' -build_efuns -build_applies
	rm -rf comptest*
	touch $(SRCDIR)/mallocwrapper.c
	cp -f grammar/opc.h         include/
	cp -f grammar/efunctions.h  include/
	cp -f grammar/opcodes.h     include/
	cp -f grammar/efun_protos.h include/
	touch files
	rm -f $(OBJDIR)/interpret.o
#因为interpret.c中包含了对所有EFUN函数指针的引用

#lpc: $(VMLIB) $(OBJDIR)/lpc.o
#	$(CC) $(CFLAGS) $(OPTIMIZE) -o $@ $(OBJDIR)/lpc.o $(VMLIB) $(STATIC_LIBS) $(EXTRALIBS)

$(VMLIB): $(OBJ)
	ar rcu $@ $(OBJ) 
	$(RANLIB) $@



-include .Dependencies

$(OBJDIR)/%.o: $(SRCDIR)/%.c
	$(CC) $(CFLAGS) $(INCLUDES) $(OPTIMIZE) -o $@ -c $<

$(OBJDIR)/main.o: $(SRCDIR)/main.c
	$(CC) $(CFLAGS) $(INCLUDES) $(OPTIMIZE) -o $@ -c $<

#$(OBJDIR)/lpc.o: $(SRCDIR)/lpc.c
#	$(CC) $(CFLAGS) $(INCLUDES) $(OPTIMIZE) -o $@ -c $<

$(OBJDIR)/lex.o: $(SRCDIR)/lex.c grammar/preprocess.c grammar/cc.h $(SRCDIR)/grammar.tab.c

$(OBJDIR)/grammar.tab.o: $(SRCDIR)/grammar.tab.c grammar/opcodes.h

$(SRCDIR)/grammar.tab.c: $(GRAMMAR)
	$(YACC) $(YFLAGS) $(GRAMMAR)
	sed "s/y.tab.c/grammar.tab.c/g" y.tab.c > grammar.tab.c
	rm -f y.tab.c
	mv -f y.tab.h include/grammar.tab.h
	mv -f grammar.tab.c $(SRCDIR)

#---------------------------------------------------------------
# 编译edit_source

grammar/edit_source: $(OBJDIR)/edit_source.o $(OBJDIR)/hash.o $(OBJDIR)/make_func.tab.o
	$(CC) $(CFLAGS) -o grammar/edit_source  $(OBJDIR)/edit_source.o \
						$(OBJDIR)/hash.o \
						$(OBJDIR)/make_func.tab.o

$(OBJDIR)/edit_source.o: grammar/edit_source.c grammar/preprocess.c grammar/cc.h

#--- Note: don't optimize the next two programs.

$(OBJDIR)/edit_source.o: grammar/edit_source.c
	$(CC) $(CFLAGS) $(INCLUDES) -o $@ -c $<

$(OBJDIR)/make_func.tab.o: grammar/make_func.tab.c
	$(CC) $(CFLAGS) $(INCLUDES) -o $@ -c $<

grammar/make_func.tab.c: grammar/make_func.y grammar/cc.h
	$(YACC) $(YFLAGS) grammar/make_func.y
	-rm -f grammer/make_func.tab.c
	-rm -f y.tab.h
	mv y.tab.c grammar/make_func.tab.c

# get ready for recompile
neat:
	-rm -rf $(OBJDIR) *.o *.tab.c *.tab.h
	-mkdir $(OBJDIR)
	-(cd ./grammar; rm -f efun_defs.c option_defs.c)
	-(cd ./grammar; rm -f opcodes.h efunctions.h opc.h efun_protos.h options_incl.h)
	-(cd ./grammar; rm -f func_spec.cpp files)
	-(cd ./grammar; rm -rf grammar.y comptest* a.out)
	-(cd ./grammar; rm -f make_func.tab.c)
#	-rm -f $(SRCDIR)/malloc.c $(SRCDIR)/mallocwrapper.c
	-rm -f $(SRCDIR)/malloc.c

# remove everything except configuration
clean: neat
	-rm -f include/grammar.tab.h include/cc.h grammar/cc.h grammar/edit_source src/grammar.tab.c include/opcodes.h \
			include/efun_protos.h include/efunctions.h include/opc.h include/configure.h packages/packages.a
	-rm -rf comptest* configure.h
	-rm -rf files
	-rm -rf depend
	-rm -rf pkgfile
	-rm -f *.a
	-rm -rf obj
	-rm -f core y.output
	-find . -name "*~" -print | xargs rm -f
	-find . -name "*.orig" -print | xargs rm -f
	-find . -name "*.rej" -print | xargs rm -f
	-(cd ./packages; find . -name "*.a" -print | xargs rm -f)
	-find . -name "*.os" -print | xargs rm -f
	-find . -name "*.dylib" -print | xargs rm -f
	-rm -f *.ln 
#	-rm -f $(GAME_BIN) $(GAME_BIN).old addr_server
	-rm -f .Dependencies tmpdepend
#	-touch .Dependencies


#---------------------------------------------------------------

parallel:
	$(MAKE) -k -l -j 6 cc.h files
	$(MAKE) -k -l -j 6 game_build

#利用GCC生成文件间的依赖关系(生成.Dependencies文件)
# (-MM表示输出文件不包括include的系统头文件)
#
depend: $(SRCDIR)/grammar.tab.c grammar/cc.h grammar/opcodes.h grammar/efunctions.h grammar/efun_defs.c grammar/configure.h
	-rm -f tmpdepend
	for i in $(SRCDIR)/*.c; do $(CC) $(INCLUDES) -MM -DDEPEND $$i >>tmpdepend; done
	sed -e "s!^[^ ]!$(OBJDIR)/&!" <tmpdepend >.Dependencies
	-rm -f tmpdepend
	touch depend

remake: neat all


.PHONY: check-syntax 
check-syntax: 
	$(CC) $(INCLUDES) $(CCFLAGS) $(CHK_SOURCES) -o flymake.s

test: $(EFUN_SPEC_FILES) grammar/local_options.h
	# - cp $(PACKAGES_SPEC_PATH)/libpackages.a $(OBJDIR)/packages
	# - cd $(OBJDIR)/packages/; ar x libpackages.a
	# - echo $(PACKAGE_DIR)
	# - echo $(PACKAGES_SPEC_PATH)
	# - echo $(EFUN_SPEC_FILES)
	# - echo $(EFUN_SPEC_FILES_UPPER)
	- echo $(EFUN_DEFINES_MACROS)

#---------------------------------------------------------------
